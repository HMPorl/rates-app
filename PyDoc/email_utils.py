"""
Email utilities for Net Rates Calculator App
Handles SendGrid API integration and Excel attachment generation
"""

import io
import json
import base64
import smtplib
import pandas as pd
from datetime import datetime
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.base import MIMEBase
from email import encoders
from typing import Dict, Any, Optional
import requests
import os
from sendgrid import SendGridAPIClient
from sendgrid.helpers.mail import Mail, Attachment, FileContent, FileName, FileType, Disposition

def create_excel_attachment(customer_name: str, price_df: pd.DataFrame, transport_df: pd.DataFrame) -> bytes:
    """Create Excel file with multiple sheets for email attachment"""
    output_excel = io.BytesIO()
    
    with pd.ExcelWriter(output_excel, engine='openpyxl') as writer:
        # Main price list sheet
        admin_df = price_df.copy()
        admin_df.columns = [
            "Item Category", "Equipment Name", "Original Price (£)", 
            "Net Price (£)", "Discount %", "Group", "Sub Section"
        ]
        admin_df["Customer Name"] = customer_name
        admin_df["Date Created"] = datetime.now().strftime("%Y-%m-%d %H:%M")
        
        # Reorder columns for admin convenience
        admin_df = admin_df[[
            "Customer Name", "Date Created", "Item Category", "Equipment Name", 
            "Original Price (£)", "Net Price (£)", "Discount %", "Group", "Sub Section"
        ]]
        
        admin_df.to_excel(writer, sheet_name='Price List', index=False)
        
        # Transport charges sheet
        if not transport_df.empty:
            transport_df.to_excel(writer, sheet_name='Transport Charges', index=False)
        
        # Summary sheet
        summary_data = {
            'Customer': [customer_name],
            'Total Items': [len(admin_df)],
            'Date Created': [datetime.now().strftime("%Y-%m-%d %H:%M")],
            'Created By': ['Net Rates Calculator'],
            'Total Value (£)': [admin_df["Net Price (£)"].sum() if "Net Price (£)" in admin_df.columns else 0]
        }
        pd.DataFrame(summary_data).to_excel(writer, sheet_name='Summary', index=False)
    
    return output_excel.getvalue()

def send_email_via_sendgrid(
    customer_name: str, 
    price_df: pd.DataFrame, 
    transport_df: pd.DataFrame, 
    admin_email: str,
    api_key: str,
    from_email: str
) -> Dict[str, Any]:
    """Send email with Excel attachment using SendGrid API"""
    try:
        # Create Excel attachment
        excel_data = create_excel_attachment(customer_name, price_df, transport_df)
        
        # Create email content
        subject = f"New Net Rates Price List - {customer_name}"
        html_content = f"""
        <html>
        <body>
            <h2>New Price List Generated</h2>
            <p><strong>Customer:</strong> {customer_name}</p>
            <p><strong>Generated:</strong> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</p>
            <p><strong>Total Items:</strong> {len(price_df)}</p>
            
            <h3>Summary</h3>
            <ul>
                <li>Price List: {len(price_df)} items</li>
                <li>Transport Options: {len(transport_df)} types</li>
                <li>Format: Excel with multiple sheets</li>
            </ul>
            
            <p>Please find the detailed price list attached as an Excel file with multiple sheets:</p>
            <ul>
                <li><strong>Price List</strong> - Complete equipment pricing</li>
                <li><strong>Transport Charges</strong> - Delivery and collection rates</li>
                <li><strong>Summary</strong> - Overview and totals</li>
            </ul>
            
            <p>Generated by Net Rates Calculator</p>
        </body>
        </html>
        """
        
        # Create SendGrid mail object
        message = Mail(
            from_email=from_email,
            to_emails=admin_email,
            subject=subject,
            html_content=html_content
        )
        
        # Create attachment
        filename = f"{customer_name}_pricelist_{datetime.now().strftime('%Y%m%d_%H%M')}.xlsx"
        encoded_file = base64.b64encode(excel_data).decode()
        
        attached_file = Attachment(
            FileContent(encoded_file),
            FileName(filename),
            FileType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"),
            Disposition("attachment")
        )
        message.attachment = attached_file
        
        # Send email
        sg = SendGridAPIClient(api_key=api_key)
        response = sg.send(message)
        
        return {
            'status': 'sent',
            'message': f'Email sent successfully to {admin_email} via SendGrid',
            'status_code': response.status_code
        }
        
    except Exception as e:
        return {
            'status': 'error',
            'message': f'SendGrid email failed: {str(e)}'
        }

def send_email_via_webhook(
    customer_name: str, 
    price_df: pd.DataFrame, 
    transport_df: pd.DataFrame, 
    admin_email: str,
    webhook_url: str,
    sendgrid_fallback: Optional[Dict[str, str]] = None
) -> Dict[str, Any]:
    """Send email via webhook with SendGrid fallback"""
    try:
        # Create Excel attachment
        excel_data = create_excel_attachment(customer_name, price_df, transport_df)
        excel_b64 = base64.b64encode(excel_data).decode('utf-8')
        
        # Prepare webhook payload
        payload = {
            "customer_name": customer_name,
            "admin_email": admin_email,
            "subject": f"New Net Rates Price List - {customer_name}",
            "message": f"New price list generated for {customer_name} with {len(price_df)} items",
            "attachment_name": f"{customer_name}_pricelist_{datetime.now().strftime('%Y%m%d_%H%M')}.xlsx",
            "attachment_data": excel_b64,
            "attachment_type": "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
            "timestamp": datetime.now().isoformat(),
            "item_count": len(price_df),
            "transport_count": len(transport_df)
        }
        
        # Send to webhook
        response = requests.post(webhook_url, json=payload, timeout=30)
        
        if response.status_code == 200:
            return {
                'status': 'sent',
                'message': f'Email sent successfully to {admin_email} via webhook'
            }
        else:
            # Try SendGrid fallback if available
            if sendgrid_fallback and sendgrid_fallback.get('api_key') and sendgrid_fallback.get('from_email'):
                return send_email_via_sendgrid(
                    customer_name, price_df, transport_df, admin_email,
                    sendgrid_fallback['api_key'], sendgrid_fallback['from_email']
                )
            else:
                return {
                    'status': 'error',
                    'message': f'Webhook failed with status {response.status_code}'
                }
                
    except Exception as e:
        # Try SendGrid fallback if available
        if sendgrid_fallback and sendgrid_fallback.get('api_key') and sendgrid_fallback.get('from_email'):
            return send_email_via_sendgrid(
                customer_name, price_df, transport_df, admin_email,
                sendgrid_fallback['api_key'], sendgrid_fallback['from_email']
            )
        else:
            return {
                'status': 'error',
                'message': f'Webhook error: {str(e)}'
            }

def send_email_via_smtp(
    customer_name: str, 
    price_df: pd.DataFrame, 
    transport_df: pd.DataFrame, 
    admin_email: str,
    smtp_config: Dict[str, Any]
) -> Dict[str, Any]:
    """Send email with Excel attachment using SMTP"""
    try:
        # Create Excel attachment
        excel_data = create_excel_attachment(customer_name, price_df, transport_df)
        
        # Create email message
        msg = MIMEMultipart()
        msg['From'] = smtp_config['from_email']
        msg['To'] = admin_email
        msg['Subject'] = f"New Net Rates Price List - {customer_name}"
        
        # Email body
        body = f"""
New price list generated for {customer_name}

Customer: {customer_name}
Generated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
Total Items: {len(price_df)}

The attached Excel file contains:
- Price List: Complete equipment pricing
- Transport Charges: Delivery and collection rates  
- Summary: Overview and totals

Generated by Net Rates Calculator
        """
        
        msg.attach(MIMEText(body, 'plain'))
        
        # Add Excel attachment
        filename = f"{customer_name}_pricelist_{datetime.now().strftime('%Y%m%d_%H%M')}.xlsx"
        attachment = MIMEBase('application', 'octet-stream')
        attachment.set_payload(excel_data)
        encoders.encode_base64(attachment)
        attachment.add_header(
            'Content-Disposition',
            f'attachment; filename= {filename}'
        )
        msg.attach(attachment)
        
        # Send email
        server = smtplib.SMTP(smtp_config['smtp_server'], smtp_config['smtp_port'])
        if smtp_config.get('use_tls', True):
            server.starttls()
        server.login(smtp_config['username'], smtp_config['password'])
        text = msg.as_string()
        server.sendmail(smtp_config['from_email'], admin_email, text)
        server.quit()
        
        return {
            'status': 'sent',
            'message': f'Email sent successfully to {admin_email} via SMTP'
        }
        
    except Exception as e:
        return {
            'status': 'error',
            'message': f'SMTP email failed: {str(e)}'
        }

def prepare_email_data(
    customer_name: str, 
    price_df: pd.DataFrame, 
    transport_df: pd.DataFrame, 
    admin_email: str
) -> Dict[str, Any]:
    """Prepare email data for manual sending"""
    try:
        # Create Excel attachment
        excel_data = create_excel_attachment(customer_name, price_df, transport_df)
        
        # Save file locally for manual sending
        filename = f"{customer_name}_pricelist_{datetime.now().strftime('%Y%m%d_%H%M')}.xlsx"
        
        # Create email template
        email_template = {
            'to': admin_email,
            'subject': f"New Net Rates Price List - {customer_name}",
            'body': f"""
New price list generated for {customer_name}

Customer: {customer_name}
Generated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
Total Items: {len(price_df)}

The attached Excel file contains:
- Price List: Complete equipment pricing
- Transport Charges: Delivery and collection rates
- Summary: Overview and totals

Generated by Net Rates Calculator
            """,
            'attachment_filename': filename,
            'attachment_size': len(excel_data)
        }
        
        return {
            'status': 'prepared',
            'message': f'Email data prepared for {customer_name}',
            'email_obj': email_template,
            'excel_data': excel_data,
            'filename': filename
        }
        
    except Exception as e:
        return {
            'status': 'error',
            'message': f'Failed to prepare email data: {str(e)}'
        }
